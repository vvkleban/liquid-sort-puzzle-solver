name: Rust Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Build
      run: cargo build

    - name: Run tests
      run: cargo test

  release:
    name: Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Build
      run: cargo build --release

    - name: Set Executable Path
      id: exec_path
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "::set-output name=path::target/release/liquid_sort_solver.exe"
        else
          echo "::set-output name=path::target/release/liquid_sort_solver"
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Set Asset Name
      id: asset_name
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "::set-output name=name::Windows-liquid_sort_solver.exe"
        else
          echo "::set-output name=name::${{ runner.os }}-liquid_sort_solver"
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.exec_path.outputs.path }}
        asset_name: ${{ steps.asset_name.outputs.name }}
        asset_content_type: application/octet-stream
